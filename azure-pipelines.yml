trigger:
  branches:
    exclude:
      - no_ci_*


pr:
- main
- master
- 20*
- v*.*.*

variables:
  ARTIFACTS_DIR: "$(Agent.BuildDirectory)/s/artifacts"

stages:
- stage: Builds
  jobs:
    - job: LinuxBuilds
      strategy:
        matrix:
          centos_8_x86_64:
            imageName: 'ubuntu-latest'
            OS_TYPE: 'centos_docker'
            OS_VERSION: centos8
            artifactName: 'Linux-CentOS-8-x86_64'
          ubuntu_18_04_x86_64:
            imageName: 'ubuntu-latest'
            OS_TYPE: 'ubuntu_docker'
            OS_VERSION: bionic
            artifactName: 'Linux-Ubuntu-18.04-x86_64'
          ubuntu_20_04_x86_64:
            imageName: 'ubuntu-latest'
            OS_TYPE: 'ubuntu_docker'
            OS_VERSION: focal
            artifactName: 'Linux-Ubuntu-20.04-x86_64'
            CHECK_AGAINST_KERNEL_HEADER: 1
          debian_buster_arm32v7:
            imageName: 'ubuntu-latest'
            OS_TYPE: 'arm32v7/debian_docker'
            OS_VERSION: 'buster'
            artifactName: 'Linux-Debian-Buster-ARM'
          debian_buster_arm64v8:
            imageName: 'ubuntu-latest'
            OS_TYPE: 'arm64v8/debian_docker'
            OS_VERSION: 'buster'
            artifactName: 'Linux-Debian-Buster-ARM64'
      pool:
        vmImage: $(imageName)
      steps:
      - checkout: self
        fetchDepth: 1
        clean: true
        persistCredentials: true
      - script: ./ci/azure/before_install_linux
        displayName: "Install Dependencies"
      - script: ./ci/azure/make_linux
        displayName: "Build"
      - task: CopyFiles@2
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['CI_BUILD_SPHINX_DOCS'], '1'))
        inputs:
          sourceFolder: '$(Agent.BuildDirectory)/s/build/'
          contents: '$(Agent.BuildDirectory)/s/build/?(*.deb|*.rpm)'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['CI_BUILD_SPHINX_DOCS'], '1'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: '$(artifactName)'

    - job: macOSBuilds
      strategy:
        matrix:
          macOS_10_15:
            imageName: 'macOS-10.15'
            artifactName: 'macOS-10.15'
          macOS_11:
            imageName: 'macOS-11'
            artifactName: 'macOS-11'
      pool:
        vmImage: $(imageName)
      steps:
      - checkout: self
        fetchDepth: 1
        clean: true
      - script: ./ci/azure/before_install_darwin
        displayName: "Install Dependencies"
      - script: ./ci/azure/make_darwin
        displayName: "Build"
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Agent.BuildDirectory)/s/build/'
          contents: '$(Agent.BuildDirectory)/s/build/?(*.pkg)'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: CopyFiles@2
        inputs:
          sourceFolder: '$(Agent.BuildDirectory)/s/build_tar/'
          contents: '$(Agent.BuildDirectory)/s/build_tar/?(*.gz)'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: '$(artifactName)'

    - job: WindowsBuilds
      strategy:
        matrix:
          VS2019_Win32:
            imageName: 'windows-2019'
            COMPILER: 'Visual Studio 16 2019'
            ARCH: 'Win32'
            artifactName: 'Windows-VS-16-2019-Win32'
          VS2019_Win64:
            imageName: 'windows-2019'
            COMPILER: 'Visual Studio 16 2019'
            ARCH: 'x64'
            artifactName: 'Windows-VS-16-2019-x64'
      pool:
        vmImage: $[ variables['imageName'] ]
      steps:
      - checkout: self
        fetchDepth: 1
        clean: true
      - task: PowerShell@2
        inputs:
          targetType: 'filePath'
          filePath: .\ci\azure\install_deps_win.ps1
        displayName: Dependencies
      - task: PowerShell@2
        inputs:
          targetType: 'filePath'
          filePath: .\ci\azure\build_win.ps1
        displayName: Build
      - task: CopyFiles@2
        displayName: 'Copy exe'
        inputs:
          sourceFolder: '$(Agent.BuildDirectory)/s/build-$(ARCH)/Release'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
      - task: PowerShell@2
        displayName: 'Copy dependencies'
        inputs:
          targetType: 'filePath'
          filePath: .\ci\azure\publish_deps.ps1
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: '$(artifactName)'

- stage: PushArtifacts
  dependsOn: Builds
  jobs:
  - job: GenerateSetupExe
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    pool:
      vmImage: 'windows-2019'
    steps:
      - task: DownloadPipelineArtifact@2
        inputs:
          path: '$(Build.ArtifactStagingDirectory)'
      - task: PowerShell@2
        inputs:
          targetType: 'filePath'
          filePath: .\ci\azure\generate_exe.ps1
        displayName: "Generate iio-emu-setup.exe"
      - task: PublishPipelineArtifact@1
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)'
          artifactName: 'iio-emu-setup-exe'

- stage: FormatCode
  condition: succeeded('Builds')
  jobs:
  - job: ClangFormat
    strategy:
      matrix:

        clang_format:
          imageName: 'ubuntu-latest'
          BUILD_TYPE: "clang_format"

    pool:
      vmImage: $(imageName)
    steps:
      - checkout: self
        fetchDepth: 1
        clean: true
        persistCredentials: true

      - script: ./ci/azure/deps.sh
        displayName: Install Dependencies

      - script: ./ci/azure/run_build.sh
        displayName: Run Build

      - bash: |
          if [ -d $(Agent.BuildDirectory)/s/artifacts ]; then
            echo "##vso[task.setVariable variable=patchexists]true"
          fi
        condition: eq(variables['BUILD_TYPE'], 'clang_format')
      - task: PublishBuildArtifacts@1
        condition: and(
          eq(variables['BUILD_TYPE'], 'clang_format'),
          eq(variables.patchexists, 'true')
          )
        inputs:
          pathToPublish: '$(Agent.BuildDirectory)/s/artifacts'
          artifactName: format-patch
